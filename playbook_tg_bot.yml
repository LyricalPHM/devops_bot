---
- name: Общие настройки для обоих хостов с базами данных
  hosts: host1, host2
  become: true
  tasks:
    - name: Установка PostgreSQL
      apt:
        name:
         - postgresql
         - postgresql-contrib
         - python3-pip
         - python3-dev
         - python3-venv
         - python3-psycopg2
        state: present

    - name: Установить права доступа к файлу журнала PostgreSQL
      file:
        path: /var/log/postgresql/postgresql-{{ postgres_version }}-main.log
        owner: postgres  
        group: adm  
        mode: "0644"     

    - name: Создание папки для репликации
      file:
        path: /archive/
        state: directory
        owner: postgres
        group: postgres
        mode: '0755'
      when: inventory_hostname == 'host1'

    - name: Запуск службы PostgreSQL
      systemd:
        name: postgresql
        state: started

    - name: Разрешить подключение к базе по паролю
      postgresql_pg_hba:
        dest: "/etc/postgresql/{{ postgres_version }}/main/pg_hba.conf"
        contype: host
        databases: all
        method: password
        users: all
        address: all
        create: true
      become: true
      become_user: postgres
      notify: Restart PostgreSQL
      when: inventory_hostname == 'host1'

    - name: Разрешение на подключение к базе для репликации
      postgresql_pg_hba:
        dest: "/etc/postgresql/{{ postgres_version }}/main/pg_hba.conf"
        contype: host
        databases: replication
        method: trust
        users: all
        address: "{{ DB_REPL_HOST }}/32"
        create: true
      become: true
      become_user: postgres
      notify: Restart PostgreSQL
      when: inventory_hostname == 'host1'

  handlers:
    - name: Restart PostgreSQL
      become: true
      systemd:
        name: postgresql
        state: restarted




- name: Настройки только для первого хоста
  hosts: host1
  tasks:

    - name: Создание пользователя для репликации
      become: true
      become_user: postgres
      postgresql_user:
        name: "{{ DB_REPL_USER }}"
        password: "{{ DB_REPL_PASSWORD }}"
        role_attr_flags: SUPERUSER,REPLICATION
        login_password: postgres
      become: true
      become_user: postgres

    - name: Создание нового пользователя и установка пароля
      postgresql_user:
        name: "{{ DB_USER }}"
        password: "{{ DB_PASSWORD }}"
        encrypted: yes
      become: true
      become_user: postgres

    - name: Создание базы данных для работы с ботом
      ansible.builtin.postgresql_db:
        name: "{{ DB_DATABASE }}"
        state: present
      become: yes
      become_user: postgres

    - name: Создание таблицы email
      ansible.builtin.postgresql_query:
        db: "{{ DB_DATABASE }}"
        query: |
          CREATE TABLE IF NOT EXISTS email (
            id SERIAL PRIMARY KEY,
            email VARCHAR(50) NOT NULL
          )
      become: yes
      become_user: postgres

    - name: Создание таблицы phone
      ansible.builtin.postgresql_query:
        db: "{{ DB_DATABASE }}"
        query: |
          CREATE TABLE IF NOT EXISTS phone (
            id SERIAL PRIMARY KEY,
            phone_number VARCHAR(20) NOT NULL
          ) 
      become: yes
      become_user: postgres

    - name: Предоставление доступа пользователю ко всем таблицам в базе данных cозданной для бота
      ansible.builtin.postgresql_privs:
        database: "{{ DB_DATABASE }}"
        role: "{{ DB_USER }}"
        obj: email,phone
        priv: ALL
        state: present
      become: yes
      become_user: postgres

    - name: Предоставление доступа к последовательности phone_id_seq
      ansible.builtin.postgresql_query:
        db: "{{ DB_DATABASE }}"
        query: "GRANT USAGE, SELECT ON SEQUENCE phone_id_seq TO {{ DB_USER }};"
      become: yes
      become_user: postgres

    - name: Предоставление доступа к последовательности email_id_seq
      ansible.builtin.postgresql_query:
        db: "{{ DB_DATABASE }}"
        query: "GRANT USAGE, SELECT ON SEQUENCE email_id_seq TO {{ DB_USER }};"
      become: yes
      become_user: postgres

    - name: Настройка конфигурации для мастер-сервера
      lineinfile:
        path: /etc/postgresql/{{ postgres_version }}/main/postgresql.conf
        line: "{{ item }}"
      loop:
        - "wal_level = replica"
        - "port = {{DB_PORT}}"
        - "max_wal_senders = 10"
        - "wal_log_hints = on"
        - "archive_mode = on"
        - "archive_command = 'cp %p /archive/%f'"
        - "listen_addresses = '*'"
        - "log_replication_commands = on"
      become: true
      become_user: postgres

    - name: Создание слота для репликации на мастер-сервере
      command: "psql -U postgres -c \"SELECT * FROM pg_create_physical_replication_slot('replication_slot');\""
      become: true
      become_user: postgres
      ignore_errors: yes

    - name: Создание каталога pg_wal на мастере
      file:
        path: /var/lib/postgresql/{{ postgres_version_2 }}/main/pg_wal
        state: directory
        owner: postgres
        group: postgres
        mode: '0750'
      become: yes
      become_user: postgres

    - name: Перезапуск службы PostgreSQL на мастер-сервере
      systemd:
        name: postgresql
        state: restarted
      become: true


- name: Настройки только для второго хоста
  hosts: host2
  tasks:

    - name: Настройка конфигурации для slave-сервера
      lineinfile:
        path: /etc/postgresql/{{ postgres_version_2 }}/main/postgresql.conf
        line: "{{ item }}"
      loop:
        - "port = {{DB_REPL_PORT}}"
        - "listen_addresses = 'localhost'"
      become: true
      become_user: postgres

    - name: Очистка каталога под репликацию
      ansible.builtin.file:
        state: "{{ item }}"
        path: "/var/lib/postgresql/{{ postgres_version_2 }}/main"
        owner: postgres
        group: postgres
        mode: 0750
      with_items:
        - absent
        - directory
      become: yes
      become_user: postgres
      
    - name: Запуск репликации базы
      command: pg_basebackup -v --pgdata=/var/lib/postgresql/{{ postgres_version_2 }}/main -R --slot=replication_slot --host={{ DB_HOST }} --port={{ DB_PORT }} -U {{DB_REPL_USER}} -w -P
      become: true
      become_user: postgres

    - name: Перезапуск службы PostgreSQL на slave-сервере
      systemd:
        name: postgresql
        state: restarted
      become: true


- name: Конфигурация бота
  hosts: host3
  become: true
  tasks:
    - name: Установка требуемых пакетов Python
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - python3
        - python3-pip
        - python3-psycopg2
        - wget

    - name: Установка дополнительных модулей Python
      pip:
        name: "{{ item }}"
        state: present
      loop:
        - paramiko
        - python-telegram-bot==13.7
        - python-dotenv
        - requests
      
    - name: Очистка и создание каталога для бота
      ansible.builtin.file:
        state: "{{ item }}"
        path: /home/bot
        owner: ansible
        group: ansible
        mode: 0755
      with_items:
        - absent
        - directory
      become: yes 

    - name: Скачивание файла bot.py из github
      command: wget https://raw.githubusercontent.com/LyricalPHM/devops_bot/docker/bot/bot.py -P /home/bot
      become: true

    - name: Установка владельца, группы и прав для файла bot.py
      ansible.builtin.file:
        path: /home/bot/bot.py
        owner: ansible
        group: ansible
        mode: '0755'
      become: true

    - name: Запуск файла bot.py в фоновом режиме
      shell: "nohup python3 bot.py > /dev/null 2>&1 &"
      environment:
        TOKEN: "{{TOKEN}}"
        DB_HOST: "{{ DB_HOST }}"
        DB_USER: "{{ DB_USER }}"
        DB_PASSWORD: "{{ DB_PASSWORD }}"
        DB_DATABASE: "{{ DB_DATABASE }}"
        RM_HOST: "{{ RM_HOST }}"
        RM_PORT: "{{ RM_PORT }}"
        RM_USER: "{{ RM_USER }}"
        RM_PASSWORD: "{{ RM_PASSWORD }}"
      args:
        chdir: /home/bot
      become: true
  



   


